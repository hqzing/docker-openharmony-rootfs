
project third_party/musl/
diff --git a/ldso/linux/dynlink.c b/ldso/linux/dynlink.c
index 15914ac8..7d21a218 100644
--- a/ldso/linux/dynlink.c
+++ b/ldso/linux/dynlink.c
@@ -3478,9 +3478,6 @@ void __dls3(size_t *sp, size_t *auxv, size_t *aux)
 	InitParameterClient();
 #endif
 
-#if defined (ENABLE_MUSL_LOG) && !defined(__LITEOS__)
-	InitHilogSocketFd();
-#endif
 #if defined(__aarch64__) && (!defined(__LITEOS__))
 	InstallPACHandler();
 #endif
diff --git a/porting/linux/user/src/hilog/hilog_adapter.c b/porting/linux/user/src/hilog/hilog_adapter.c
index bfe1a34c..c73c5025 100644
--- a/porting/linux/user/src/hilog/hilog_adapter.c
+++ b/porting/linux/user/src/hilog/hilog_adapter.c
@@ -69,32 +69,7 @@ static void Cleanup()
 
 static int GetSocketFdInstance()
 {
-    if (g_socketFd == INVALID_SOCKET || fcntl(g_socketFd, F_GETFL) == -1) {
-        pthread_mutex_lock(&g_lock);
-        if (g_socketFd == INVALID_SOCKET || fcntl(g_socketFd, F_GETFL) == -1) {
-            int tempSocketFd = TEMP_FAILURE_RETRY(socket(AF_UNIX, SOCKET_TYPE, 0));
-            if (tempSocketFd < 0) {
-                dprintf(ERROR_FD, "HiLogAdapter: Can't create socket! Errno: %d\n", errno);
-                pthread_mutex_unlock(&g_lock);
-                return tempSocketFd;
-            }
-
-            long int result =
-                TEMP_FAILURE_RETRY(connect(tempSocketFd, (const struct sockaddr *)(&SOCKET_ADDR), sizeof(SOCKET_ADDR)));
-            if (result < 0) {
-                dprintf(ERROR_FD, "HiLogAdapter: Can't connect to server. Errno: %d\n", errno);
-                if (tempSocketFd >= 0) {
-                    __close(tempSocketFd);
-                }
-                pthread_mutex_unlock(&g_lock);
-                return result;
-            }
-            g_socketFd = tempSocketFd;
-            atexit(Cleanup);
-        }
-        pthread_mutex_unlock(&g_lock);
-    }
-    return g_socketFd;
+    return -1;
 }
 
 static int SendMessage(HilogMsg *header, const char *tag, uint16_t tagLen, const char *fmt, uint16_t fmtLen)
@@ -172,23 +147,12 @@ int HiLogAdapterVaList(LogType type, LogLevel level, unsigned int domain, const
 
 bool is_musl_log_enable()
 {
-    if (getpid() == 1) {
-        return false;
-    }
-    return musl_log_enable;
+    return false;
 }
 
 bool HiLogAdapterIsLoggable(unsigned int domain, const char *tag, LogLevel level)
 {
-    if (tag == NULL || level < g_logLevel || level <= LOG_LEVEL_MIN || level >= LOG_LEVEL_MAX) {
-        return false;
-    }
-
-    if (!is_musl_log_enable()) {
-        return false;
-    }
-
-    return true;
+    return false;
 }
 
 #ifdef OHOS_ENABLE_PARAMETER
diff --git a/src/hilog/linux/hilog_adapter.c b/src/hilog/linux/hilog_adapter.c
index cbe371d5..a5893367 100644
--- a/src/hilog/linux/hilog_adapter.c
+++ b/src/hilog/linux/hilog_adapter.c
@@ -65,19 +65,7 @@ extern int __close(int fd);
 // only generate a new socketFd
 static int GenerateHilogSocketFd()
 {
-    int socketFd = TEMP_FAILURE_RETRY(socket(AF_UNIX, SOCKET_TYPE, 0));
-    if (socketFd == INVALID_SOCKET) {
-        dprintf(ERROR_FD, "HiLogAdapter_init: Can't create socket! Errno: %d\n", errno);
-        return INVALID_SOCKET;
-    }
-    long int result =
-        TEMP_FAILURE_RETRY(connect(socketFd, (const struct sockaddr *)(&SOCKET_ADDR), sizeof(SOCKET_ADDR)));
-    if (result == INVALID_RESULT) {
-        dprintf(ERROR_FD, "HiLogAdapter_init: Can't connect to server. Errno: %d\n", errno);
-        __close(socketFd);
-        return INVALID_SOCKET;
-    }
-    return socketFd;
+    return -1;
 }
 
 HILOG_LOCAL_API
@@ -234,23 +222,12 @@ int HiLogAdapterVaList(LogType type, LogLevel level, unsigned int domain, const
 
 bool is_musl_log_enable()
 {
-    if (getpid() == 1) {
-        return false;
-    }
-    return musl_log_enable;
+    return false;
 }
 
 bool HiLogAdapterIsLoggable(unsigned int domain, const char *tag, LogLevel level)
 {
-    if (tag == NULL || level < g_logLevel || level <= LOG_LEVEL_MIN || level >= LOG_LEVEL_MAX) {
-        return false;
-    }
-
-    if (!is_musl_log_enable()) {
-        return false;
-    }
-
-    return true;
+    return false;
 }
 
 #ifdef OHOS_ENABLE_PARAMETER
